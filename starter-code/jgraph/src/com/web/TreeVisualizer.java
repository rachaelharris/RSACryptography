/*
Code file generated by Professor Mohan for CMPSC 202 purpose.
This code file is adapted from the JGraphT library example provided in 
JGraph downloads from the JGraph team. 
*/
package com.web;
import java.awt.*;
import java.awt.geom.*;
import javax.swing.*;
import org.jgraph.*;
import org.jgraph.graph.*;
import org.jgrapht.*;
import org.jgrapht.ext.*;
import org.jgrapht.graph.*;
import org.jgrapht.graph.DefaultEdge;
@SuppressWarnings("deprecation")
public class TreeVisualizer extends JApplet {
    private static final Color DEFAULT_BG_COLOR = Color.decode("#DCDCDC");
    private static final Dimension DEFAULT_SIZE = new Dimension(530, 320);
    private JGraphModelAdapter<String, DefaultEdge> jgAdapter;
    /**
     * An alternative starting point for this demo, to also allow running this applet as an
     * application.
     *
     * @param args ignored.
     */
    public static void main(String[] args)
    {
        TreeVisualizer applet = new TreeVisualizer();
        applet.init();

        JFrame frame = new JFrame();
        frame.getContentPane().add(applet);
        frame.setTitle("Tree using JGraphT Library");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        System.out.println("Thanks for viewing the tree structure...");

    }

    @Override
    public void init()
    {
        // create a JGraphT graph
        ListenableGraph<String, DefaultEdge> g =
            new ListenableDirectedMultigraph<>(DefaultEdge.class);

        // create a visualization using JGraph, via an adapter
        jgAdapter = new JGraphModelAdapter<>(g);

        JGraph jgraph = new JGraph(jgAdapter);

        adjustDisplaySettings(jgraph);
        getContentPane().add(jgraph);
        resize(DEFAULT_SIZE);
        


        String[] nodes = {"E","C","K","A","B","J","M"};
        int nodeindex = 0;
        for (String node: nodes){
            g.addVertex(node);
            
             if (nodeindex == 0)
                positionVertexAt(node, 200, 20, true);        
            else if (nodeindex == 1)
                positionVertexAt(node, 100, 120, false);        
            else if (nodeindex == 2)
                positionVertexAt(node, 300, 120, false);        
            else if (nodeindex == 3)
                positionVertexAt(node, 50, 220, true); 
            else if (nodeindex == 4)
                positionVertexAt(node, 150, 220, true); 
            else if (nodeindex == 5)
                positionVertexAt(node, 250, 220, true); 
            else if (nodeindex == 6)
                positionVertexAt(node, 350, 220, true); 


            
            nodeindex++;

        }

        String[] edges ={"E-C","E-K","C-A","C-B","K-J","K-M"};
        for (String edge: edges){
            String[] mapping = edge.split("-");
            g.addEdge(mapping[0],mapping[1]);    
        }

        // that's all there is to it!...
    }

    private void adjustDisplaySettings(JGraph jg)
    {
        jg.setPreferredSize(DEFAULT_SIZE);

        Color c = DEFAULT_BG_COLOR;
        String colorStr = null;

        try {
            colorStr = getParameter("bgcolor");
        } catch (Exception e) {
        }

        if (colorStr != null) {
            c = Color.decode(colorStr);
        }

        jg.setBackground(c);
    }

    @SuppressWarnings("unchecked")
    private void positionVertexAt(Object vertex, int x, int y, boolean isRed)
    {
        DefaultGraphCell cell = jgAdapter.getVertexCell(vertex);
        AttributeMap attr = cell.getAttributes();
        Rectangle2D bounds = GraphConstants.getBounds(attr);

        Rectangle2D newBounds = new Rectangle2D.Double(x, y, bounds.getWidth(), bounds.getHeight());

        GraphConstants.setBounds(attr, newBounds);
        if (isRed)
            GraphConstants.setBackground(attr, Color.RED);
        else
            GraphConstants.setBackground(attr, Color.GRAY);
        

        AttributeMap cellAttr = new AttributeMap();
        cellAttr.put(cell, attr);
        jgAdapter.edit(cellAttr, null, null, null);

    }

    /**
     * A listenable directed multigraph that allows loops and parallel edges.
     */
    private static class ListenableDirectedMultigraph<V, E>
        extends DefaultListenableGraph<V, E>
    {
        ListenableDirectedMultigraph(Class<E> edgeClass)
        {
            super(new DirectedMultigraph<>(edgeClass));
        }
    }
}

// End JGraphAdapterDemo.java
